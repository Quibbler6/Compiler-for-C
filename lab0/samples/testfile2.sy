// SysY Dijkstra Shortest Path Algorithm

int INF = 1000000000;

int minDistance(int dist[], int visited[], int V) {
    int min = INF, min_index;
    int v = 0;
    while (v < V) {
        if (visited[v] == 0 && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
        v = v + 1;
    }
    return min_index;
}

void printSolution(int dist[], int V) {
    int i = 0;
    while (i < V) {
        write(dist[i]);
        i = i + 1;
    }
}

void dijkstra(int graph[][6], int src, int V) {
    int dist[100];
    int visited[100];

    int i = 0;
    while (i < V) {
        dist[i] = INF;
        visited[i] = 0;
        i = i + 1;
    }

    dist[src] = 0;

    int count = 0;
    while (count < V - 1) {
        int u = minDistance(dist, visited, V);
        visited[u] = 1;

        int v = 0;
        while (v < V) {
            if (!visited[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
            v= 1 + v;
        }
        count = count + 1;
    }

    printSolution(dist, V);
}

int main() {
    int V = 6;
    int graph[6][6] = {
        {0, 2, 0, 6, 0, 0},
        {2, 0, 3, 8, 5, 0},
        {0, 3, 0, 0, 7, 0},
        {6, 8, 0, 0, 9, 0},
        {0, 5, 7, 9, 0, 4},
        {0, 0, 0, 0, 4, 0}
    };
    int src = 0;

    dijkstra(graph, src, V);

    return 0;
}
